<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters">
        <collectionProp name="UserParameters.names">
          <stringProp name="3601339">uuid</stringProp>
          <stringProp name="-2105585035">callBack_URL</stringProp>
          <stringProp name="951198316">redirect_URL</stringProp>
          <stringProp name="1405853038">fixed_token</stringProp>
          <stringProp name="-1721160959">base_url</stringProp>
          <stringProp name="1763763109">kona_scan</stringProp>
          <stringProp name="92668751">admin</stringProp>
          <stringProp name="657742070">stg_user_1</stringProp>
          <stringProp name="657742071">stg_user_2</stringProp>
          <stringProp name="1661852548">session_Id</stringProp>
          <stringProp name="1377369866">new_user</stringProp>
          <stringProp name="1753007755">product_Id</stringProp>
          <stringProp name="-1103805119">token_Id</stringProp>
          <stringProp name="95116489">registration_URL</stringProp>
          <stringProp name="2054524501">escrow_URL</stringProp>
          <stringProp name="-738541415">ecsrow_txId</stringProp>
          <stringProp name="1337480173">refundEscrow_URL</stringProp>
          <stringProp name="-1486827551">refundEscrow_txId</stringProp>
          <stringProp name="190744472">single_Trade_EscrowURL</stringProp>
          <stringProp name="226508081">single_Trade_txId</stringProp>
          <stringProp name="-1868114295">multi_Trade_EscrowURL</stringProp>
          <stringProp name="-928212064">multi_Trade_txId</stringProp>
        </collectionProp>
        <collectionProp name="UserParameters.thread_values">
          <collectionProp name="-793071791">
            <stringProp name="118040362">${__UUID()}</stringProp>
            <stringProp name="1374310021">https://localhost:3030/callbackDatas</stringProp>
            <stringProp name="447800029">https://stg-explorer.ksldev.com</stringProp>
            <stringProp name="-1955816876">${jwtToken}</stringProp>
            <stringProp name="0"></stringProp>
            <stringProp name="447800029">https://stg-explorer.ksldev.com</stringProp>
            <stringProp name="-459693394">d7e6e321226527cd27f555de83d1ced8d1d4c6de00099cc3a7509276ca51e3aa</stringProp>
            <stringProp name="2044952458">${bcaData}</stringProp>
            <stringProp name="-1947749276">3a532c2638d0af0293dfccc0cb2c3dc7147f02b2acba2fd11fa2bd619800816b</stringProp>
            <stringProp name="32156803">${sessionID}</stringProp>
            <stringProp name="118040362">${__UUID()}</stringProp>
            <stringProp name="118040362">${__UUID()}</stringProp>
            <stringProp name="1433022464">${tokenID}</stringProp>
            <stringProp name="1147841093">${url}</stringProp>
            <stringProp name="424549098">${escrowURL}</stringProp>
            <stringProp name="305877826">${escrowtxId}</stringProp>
            <stringProp name="-1244318910">${refundEscrowURL}</stringProp>
            <stringProp name="110577130">${refundEscrowtxId}</stringProp>
            <stringProp name="1488562552">${singleTradeEscrowURL}</stringProp>
            <stringProp name="2124332025">${singleTradetxId}</stringProp>
            <stringProp name="-1212861387">${multiTradeEscrowURL}</stringProp>
            <stringProp name="1260171036">${multiTradetxId}</stringProp>
          </collectionProp>
        </collectionProp>
        <boolProp name="UserParameters.per_iteration">true</boolProp>
      </UserParameters>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - Error">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report -Error">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Controller 1" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="UUID Controller">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="477206849">UUID Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Register Client">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="-946780082">registerClient</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Mint Token">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="-1180421481">MintToken</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Transfer Token">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="-1225294674">TransferToken</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check balance after transfer">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="-235520812">CheckBalance</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Redeem Escrow" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="-1475248084">RedeemEscrowTransfer</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Redeem Release" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="-522333274">RedeemEscrowRelease</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check balance after redeem" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="-235520812">CheckBalance</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Refund Escrow" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="20788488">RefundEscrowTransfer</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Refund Release" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="-751168694">RefundEscrowRelease</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check balance after refund release" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="-235520812">CheckBalance</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Single Trade Escrow" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="-2019838900">SingleTradeEscrowTransfer</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Single Trade Escrow InfoList" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="1171947213">SingleTradeEscrowInfoList</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Single Trade Release" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="1261214598">SingleTradeEscrowRelease</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check balance after single trade" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="-235520812">CheckBalance</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Multilateral Escrow" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="-1450436754">MultilateralEscrowTransfer</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Multi Trade Escrow InfoList" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="-1162599689">MultilateralTradeEscrowInfoList</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Multilateral Release" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="32656420">MultilateralEscrowRelease</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Check balance after MLT trade" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="65018">API</stringProp>
            <stringProp name="-235520812">CheckBalance</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="API" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UUID Controller"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.Date
import java.util.UUID

def claims = [
    t_id: UUID.randomUUID().toString(),
    name: &quot;Kowshik&quot;,
    lang: &quot;en&quot;,
    email: &quot;kowshiksaha78@yopmail.com&quot;,
    phone_number: &quot;01625869040&quot;,
    role: &quot;ADMIN&quot;,
    issueDate: new Date().getTime() / 1000,
    expDate: (new Date().getTime() / 1000) + 3600
]

String jwtToken = claims.collect { k, v -&gt; &quot;$k=$v&quot; }.join(&apos;&amp;&apos;)
props.put(&quot;fixed_token&quot;, jwtToken)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="registerClient" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="registerClient" enabled="true">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/initialize-operation</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;registerClient&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;redirectURL&quot;: &quot;${redirect_URL}&quot;,&#xd;
        &quot;userIdentifier&quot;: &quot;${new_user}&quot;&#xd;
    },&#xd;
    &quot;metaData&quot; : {&#xd;
        &quot;correlationId&quot; : &quot;${__UUID()}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">a8bb6fd3-c0d6-4a3a-8fe0-58fd191cce96</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def response = prev.getResponseDataAsString()
def jsonResponse = new JsonSlurper().parseText(response)
def sessionID = jsonResponse.result.sessionId
def url = jsonResponse.result.url

vars.put(&quot;session_Id&quot;, sessionID)
vars.put(&quot;registration_URL&quot;, url)
log.info(&quot;Extracted session: ${sessionID}&quot;)
log.info(&quot;Extracted session: ${url}&quot;)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config" enabled="true">
            <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
            <stringProp name="WebDriverConfig.driver_path">C:\Users\kowshik.saha\Desktop\chromedriver_126.exe</stringProp>
            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
            <boolProp name="WebDriverConfig.headless">false</boolProp>
            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
            <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
            <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host"></stringProp>
            <intProp name="WebDriverConfig.http_port">8080</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

WDS.sampleResult.sampleStart();

try {
    String url = &quot;${registration_URL}&quot;;
    var wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(5));
    WDS.browser.get(url);

    List&lt;By&gt; inputFields = new ArrayList&lt;&gt;();
    List&lt;By&gt; reInputFields = new ArrayList&lt;&gt;();

    for (int i = 0; i &lt;= 5; i++) {
        inputFields.add(By.id(&quot;pinInput&quot; + i));
        reInputFields.add(By.id(&quot;pinReinput&quot; + i));
    }

    for (int i = 0; i &lt; inputFields.size(); i++) {
        By inputField = inputFields.get(i);
        wait.until(ExpectedConditions.visibilityOfElementLocated(inputField));
        WDS.browser.findElement(inputField).sendKeys(&quot;1&quot;);
        Thread.sleep(100);
    }

    for (int i = 0; i &lt; reInputFields.size(); i++) {
        By reInputField = reInputFields.get(i);
        wait.until(ExpectedConditions.visibilityOfElementLocated(reInputField));
        WDS.browser.findElement(reInputField).sendKeys(&quot;1&quot;);
        Thread.sleep(100);
    }

    By submitBtnLocator = By.id(&quot;pinButton&quot;);
    wait.until(ExpectedConditions.visibilityOfElementLocated(submitBtnLocator));
    WDS.browser.findElement(submitBtnLocator).click();
} catch (Exception e) {
    WDS.log.error(&quot;Error occurred: &quot; + e.getMessage());
}

String baseUrl = &quot;https://stg-explorer.ksldev.com&quot;;
boolean isMatched = false;
while (!isMatched) {
    if (WDS.browser.getCurrentUrl().startsWith(baseUrl)) {
        try {
            URL url = new URL(WDS.browser.getCurrentUrl());
            Map&lt;String, String&gt; queryParams = new HashMap&lt;&gt;();
            String[] queryPairs = url.getQuery().split(&quot;&amp;&quot;);

            for (String queryPair : queryPairs) {
                String[] parts = queryPair.split(&quot;=&quot;);
                queryParams.put(parts[0], parts[1]);
                isMatched = true;
            }

            String bcaData = queryParams.get(&quot;bca&quot;);
            WDS.vars.put(&quot;stg_user_1&quot;, bcaData);
        } catch (Exception e) {
            WDS.log.error(&quot;Error extracting bca data: &quot; + e.getMessage());
        }
    }
}
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">groovy</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MintToken"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="mintToken">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/submit-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;mintToken&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;txInitiator&quot;: &quot;${admin}&quot;,&#xd;
        &quot;tokenOwner&quot;: &quot;${admin}&quot;,&#xd;
        &quot;products&quot;: [&#xd;
            {&#xd;
                &quot;productId&quot;: &quot;${product_Id}&quot;,&#xd;
                &quot;count&quot;: 100000,&#xd;
                &quot;tokenInfo&quot;: {&#xd;
                    &quot;tokenType&quot;: &quot;FT&quot;,&#xd;
                    &quot;url&quot;: &quot;https://www.tokenur-${session_Id}.com&quot;,&#xd;
                    &quot;aboutInformation&quot;: &quot;This is a about!&quot;,&#xd;
                    &quot;metaData&quot;: {&#xd;
                        &quot;imageUrl&quot;: &quot;https://www.token.com/token/image1.png&quot;,&#xd;
                        &quot;socialMedia&quot;: &quot;https://www.minhaz-social-media.com&quot;&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    &quot;metaData&quot; : {&#xd;
        &quot;correlationId&quot; : &quot;${__UUID()}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">0f4d744c-68ed-4183-9587-209f3ed78ba0</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def response = prev.getResponseDataAsString()
def jsonResponse = new JsonSlurper().parseText(response)
def tokenID = jsonResponse.result.tokens[0].tokenId

vars.put(&quot;token_Id&quot;, tokenID.toString())
log.info(&quot;Extracted tokenID: ${tokenID}&quot;)
Thread.sleep(5000)
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TransferToken"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="transferToken">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/submit-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;buyToken&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;txInitiator&quot;: &quot;${admin}&quot;,&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;tokenReceivers&quot;: [&#xd;
            {&#xd;
                &quot;receiver&quot;: &quot;${stg_user_1}&quot;,&#xd;
                &quot;tokenId&quot;: ${token_Id},&#xd;
                &quot;count&quot;: 100000&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    &quot;metaData&quot;: {&#xd;
        &quot;correlationId&quot;: &quot;${__UUID()}&quot;&#xd;
    }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">9dcbb460-b947-4ba8-b53f-c1accee0f45a</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">Thread.sleep(5000)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CheckBalance"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkBalance">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/query-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;checkBalance&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;owner&quot;: &quot;${stg_user_1}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">9d73d513-0de8-479a-bb9e-87cbacf9fc4d</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RedeemEscrowTransfer"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RedeemEscrowTransfer">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/initialize-operation</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;redeemEscrowTransfer&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;redirectURL&quot;: &quot;${redirect_URL}&quot;,&#xd;
        &quot;sender&quot;: &quot;${stg_user_1}&quot;,&#xd;
        &quot;tokenId&quot;: ${token_Id},&#xd;
        &quot;tokenAmount&quot;: 10&#xd;
    },&#xd;
    &quot;metaData&quot; : {&#xd;
        &quot;correlationId&quot; : &quot;${__UUID()}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">507213c1-80b3-4a8b-a4f4-b5b63bb503a5</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def response = prev.getResponseDataAsString()
def jsonResponse = new JsonSlurper().parseText(response)
def escrowURL = jsonResponse.result.url

vars.put(&quot;escrow_URL&quot;, escrowURL)
log.info(&quot;Extracted escrowURL: ${escrowURL}&quot;)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config">
            <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
            <stringProp name="WebDriverConfig.driver_path">C:\Users\kowshik.saha\Desktop\chromedriver_126.exe</stringProp>
            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
            <boolProp name="WebDriverConfig.headless">false</boolProp>
            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
            <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
            <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host"></stringProp>
            <intProp name="WebDriverConfig.http_port">8080</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WebDriver Sampler">
            <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.net.URL;
import java.util.HashMap;

WDS.sampleResult.sampleStart();

try {
    String url = &quot;${escrow_URL}&quot;;
    var wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(10));
    WDS.browser.get(url);
    List&lt;By&gt; inputFields = new ArrayList&lt;&gt;();

    for (int i = 0; i &lt;= 5; i++) {
        inputFields.add(By.id(&quot;pinInput&quot; + i));
    }

    for (int i = 0; i &lt; inputFields.size(); i++) {
        By inputField = inputFields.get(i);
        wait.until(ExpectedConditions.visibilityOfElementLocated(inputField));
        WDS.browser.findElement(inputField).sendKeys(&quot;1&quot;);
    }

    By submitBtnLocator = By.id(&quot;pinButton&quot;);
    wait.until(ExpectedConditions.visibilityOfElementLocated(submitBtnLocator));
    WDS.browser.findElement(submitBtnLocator).click();
} catch (InterruptedException e) {
    WDS.log.error(&quot;Thread interrupted: &quot; + e.getMessage());
} catch (Exception e) {
    WDS.log.error(&quot;Error occurred: &quot; + e.getMessage());
}

String baseUrl = &quot;https://stg-explorer.ksldev.com&quot;;
boolean isMatched = false;
while (!isMatched) {
    if (WDS.browser.getCurrentUrl().startsWith(baseUrl)) {
        try {
            URL url = new URL(WDS.browser.getCurrentUrl());
            Map&lt;String, String&gt; queryParams = new HashMap&lt;&gt;();
            String[] queryPairs = url.getQuery().split(&quot;&amp;&quot;);

            for (String queryPair : queryPairs) {
                String[] parts = queryPair.split(&quot;=&quot;);
                queryParams.put(parts[0], parts[1]);
                isMatched = true;
            }

            String escrowtxId = queryParams.get(&quot;txId&quot;);
            WDS.vars.put(&quot;ecsrow_txId&quot;, escrowtxId);
        } catch (Exception e) {
            WDS.log.error(&quot;Error extracting bca data: &quot; + e.getMessage());
        }
    }
}
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">groovy</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RedeemEscrowRelease"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="redeemEscrowRelease">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/submit-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;redeemEscrowRelease&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;receiver&quot;: null,&#xd;
        &quot;escrowTxId&quot;: &quot;${ecsrow_txId}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">d24edc21-752c-48f4-ab46-2e174a89b4af</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">Thread.sleep(5000)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RefundEscrowTransfer"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RefundEscrowTransfer" enabled="true">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/initialize-operation</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;refundEscrowTransfer&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;redirectURL&quot;: &quot;${redirect_URL}&quot;,&#xd;
        &quot;sender&quot;: &quot;${stg_user_1}&quot;,&#xd;
        &quot;beneficiary&quot;: &quot;${admin}&quot;,&#xd;
        &quot;tokenId&quot;: ${token_Id},&#xd;
        &quot;tokenAmount&quot;: 10&#xd;
    },&#xd;
    &quot;metaData&quot; : {&#xd;
        &quot;correlationId&quot; : &quot;${__UUID()}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">8d347314-9b55-4a2b-959b-46b06a6c92f7</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def response = prev.getResponseDataAsString()
def jsonResponse = new JsonSlurper().parseText(response)
def refundEscrowURL = jsonResponse.result.url

vars.put(&quot;refundEscrow_URL&quot;, refundEscrowURL)
log.info(&quot;Extracted refundEscrowURL: ${escrowURL}&quot;)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config" enabled="true">
            <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
            <stringProp name="WebDriverConfig.driver_path">C:\Users\kowshik.saha\Desktop\chromedriver_126.exe</stringProp>
            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
            <boolProp name="WebDriverConfig.headless">true</boolProp>
            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
            <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
            <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host"></stringProp>
            <intProp name="WebDriverConfig.http_port">8080</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.util.*;

WDS.sampleResult.sampleStart();

try {
    String url = &quot;${refundEscrow_URL}&quot;;
    var wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(5));
    WDS.browser.get(url);

    List&lt;By&gt; inputFields = new ArrayList&lt;&gt;();

    for (int i = 0; i &lt;= 5; i++) {
        inputFields.add(By.id(&quot;pinInput&quot; + i));
    }

    for (int i = 0; i &lt; inputFields.size(); i++) {
        By inputField = inputFields.get(i);
        wait.until(ExpectedConditions.visibilityOfElementLocated(inputField));
        WDS.browser.findElement(inputField).sendKeys(&quot;1&quot;);
        Thread.sleep(100);
    }

    By submitBtnLocator = By.id(&quot;pinButton&quot;);
    wait.until(ExpectedConditions.visibilityOfElementLocated(submitBtnLocator));
    WDS.browser.findElement(submitBtnLocator).click();
} catch (Exception e) {
    WDS.log.error(&quot;Error occurred: &quot; + e.getMessage());
}

String baseUrl = &quot;https://stg-explorer.ksldev.com&quot;;
boolean isMatched = false;

while (!isMatched) {
    if (WDS.browser.getCurrentUrl().startsWith(baseUrl)) {
        try {
            URL currentUrl = new URL(WDS.browser.getCurrentUrl());
            Map&lt;String, String&gt; queryParams = new HashMap&lt;&gt;();
            String[] queryPairs = currentUrl.getQuery().split(&quot;&amp;&quot;);

            for (String queryPair : queryPairs) {
                String[] parts = queryPair.split(&quot;=&quot;);
                queryParams.put(parts[0], parts[1]);
                isMatched = true;
            }

            String refundEscrowtxId = queryParams.get(&quot;txId&quot;);
            WDS.vars.put(&quot;refundEscrow_txId&quot;, refundEscrowtxId);
        } catch (Exception e) {
            WDS.log.error(&quot;Error extracting txId data: &quot; + e.getMessage());
        }
    }
}
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">groovy</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RefundEscrowRelease"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="refundEscrowRelease" enabled="true">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/submit-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;refundEscrowRelease&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;escrowTxId&quot;: &quot;${refundEscrow_txId}&quot;,&#xd;
        &quot;receiver&quot;: &quot;${admin}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">97035eb2-0a0c-45b2-9a3a-19dc35ba6718</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SingleTradeEscrowTransfer"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SingleTradeEscrowTransfer" enabled="true">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/initialize-operation</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;escrowTransfer&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;redirectURL&quot;: &quot;${redirect_URL}&quot;,&#xd;
        &quot;sender&quot;: &quot;${stg_user_1}&quot;,&#xd;
        &quot;beneficiary&quot;: &quot;${stg_user_2}&quot;,&#xd;
        &quot;tokenId&quot;: ${token_Id},&#xd;
        &quot;tokenAmount&quot;: 10&#xd;
    },&#xd;
    &quot;metaData&quot; : {&#xd;
        &quot;correlationId&quot; : &quot;${__UUID()}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">dca23e09-491d-4a32-a634-1679870dfddc</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def response = prev.getResponseDataAsString()
def jsonResponse = new JsonSlurper().parseText(response)
def singleTradeEscrowURL = jsonResponse.result.url

vars.put(&quot;single_Trade_EscrowURL&quot;, singleTradeEscrowURL)
log.info(&quot;Extracted singleTradeEscrowURL: ${singleTradeEscrowURL}&quot;)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config" enabled="true">
            <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
            <stringProp name="WebDriverConfig.driver_path">C:\Users\kowshik.saha\Desktop\chromedriver_126.exe</stringProp>
            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
            <boolProp name="WebDriverConfig.headless">true</boolProp>
            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
            <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
            <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host"></stringProp>
            <intProp name="WebDriverConfig.http_port">8080</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.util.*;

WDS.sampleResult.sampleStart();

try {
    String url = &quot;${single_Trade_EscrowURL}&quot;;
    var wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(5));
    WDS.browser.get(url);

    List&lt;By&gt; inputFields = new ArrayList&lt;&gt;();

    for (int i = 0; i &lt;= 5; i++) {
        inputFields.add(By.id(&quot;pinInput&quot; + i));
    }

    for (int i = 0; i &lt; inputFields.size(); i++) {
        By inputField = inputFields.get(i);
        wait.until(ExpectedConditions.visibilityOfElementLocated(inputField));
        WDS.browser.findElement(inputField).sendKeys(&quot;1&quot;);
        Thread.sleep(100);
    }

    By submitBtnLocator = By.id(&quot;pinButton&quot;);
    wait.until(ExpectedConditions.visibilityOfElementLocated(submitBtnLocator));
    WDS.browser.findElement(submitBtnLocator).click();
} catch (Exception e) {
    WDS.log.error(&quot;Error occurred: &quot; + e.getMessage());
}

String baseUrl = &quot;https://stg-explorer.ksldev.com&quot;;
boolean isMatched = false;

while (!isMatched) {
    if (WDS.browser.getCurrentUrl().startsWith(baseUrl)) {
        try {
            URL currentUrl = new URL(WDS.browser.getCurrentUrl());
            Map&lt;String, String&gt; queryParams = new HashMap&lt;&gt;();
            String[] queryPairs = currentUrl.getQuery().split(&quot;&amp;&quot;);

            for (String queryPair : queryPairs) {
                String[] parts = queryPair.split(&quot;=&quot;);
                queryParams.put(parts[0], parts[1]);
                isMatched = true;
            }

            String singleTradetxId = queryParams.get(&quot;txId&quot;);
            WDS.vars.put(&quot;single_Trade_txId&quot;, singleTradetxId);
        } catch (Exception e) {
            WDS.log.error(&quot;Error extracting txId data: &quot; + e.getMessage());
        }
    }
}
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">groovy</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SingleTradeEscrowInfoList"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SingleTradeEscrowInfoList" enabled="true">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/query-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;getTradeEscrowInfoList&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;sender&quot;: &quot;${stg_user_1}&quot;,&#xd;
        &quot;admin&quot;: &quot;${admin}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">7d42306a-fda9-469a-a4d6-35259824212c</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SingleTradeEscrowRelease"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SingleTradeReleaseEscrow" enabled="true">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/submit-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;releaseEscrow&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;receiver&quot;: &quot;${stg_user_2}&quot;,&#xd;
        &quot;escrowTxId&quot;: &quot;${single_Trade_txId}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">5abebe87-69c9-45a4-8350-309b1b9267f7</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MultilateralEscrowTransfer"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MultilateralEscrowTransfer" enabled="true">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/initialize-operation</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;multilateralEscrowTransfer&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;redirectURL&quot;: &quot;${redirect_URL}&quot;,&#xd;
        &quot;sender&quot;: &quot;${stg_user_1}&quot;,&#xd;
        &quot;beneficiary&quot;: &quot;0x0&quot;,&#xd;
        &quot;tokenId&quot;: ${token_Id},&#xd;
        &quot;tokenAmount&quot;: 10&#xd;
    },&#xd;
    &quot;metaData&quot;: {&#xd;
        &quot;correlationId&quot;: &quot;${__UUID()}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">d276b435-44da-4b83-b5b7-6006f41cfc2a</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def response = prev.getResponseDataAsString()
def jsonResponse = new JsonSlurper().parseText(response)
def multiTradeEscrowURL = jsonResponse.result.url

vars.put(&quot;multi_Trade_EscrowURL&quot;, multiTradeEscrowURL)
log.info(&quot;Extracted correlationId: ${multiTradeEscrowURL}&quot;)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config" enabled="true">
            <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
            <stringProp name="WebDriverConfig.driver_path">C:\Users\kowshik.saha\Desktop\chromedriver_126.exe</stringProp>
            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
            <boolProp name="WebDriverConfig.headless">true</boolProp>
            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
            <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
            <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host"></stringProp>
            <intProp name="WebDriverConfig.http_port">8080</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.util.*;

WDS.sampleResult.sampleStart();

try {
    String url = &quot;${multi_Trade_EscrowURL}&quot;;
    var wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(5));
    WDS.browser.get(url);

    List&lt;By&gt; inputFields = new ArrayList&lt;&gt;();

    for (int i = 0; i &lt;= 5; i++) {
        inputFields.add(By.id(&quot;pinInput&quot; + i));
    }

    for (int i = 0; i &lt; inputFields.size(); i++) {
        By inputField = inputFields.get(i);
        wait.until(ExpectedConditions.visibilityOfElementLocated(inputField));
        WDS.browser.findElement(inputField).sendKeys(&quot;1&quot;);
        Thread.sleep(100);
    }

    By submitBtnLocator = By.id(&quot;pinButton&quot;);
    wait.until(ExpectedConditions.visibilityOfElementLocated(submitBtnLocator));
    WDS.browser.findElement(submitBtnLocator).click();
} catch (Exception e) {
    WDS.log.error(&quot;Error occurred: &quot; + e.getMessage());
}

String baseUrl = &quot;https://stg-explorer.ksldev.com&quot;;
boolean isMatched = false;

while (!isMatched) {
    if (WDS.browser.getCurrentUrl().startsWith(baseUrl)) {
        try {
            URL currentUrl = new URL(WDS.browser.getCurrentUrl());
            Map&lt;String, String&gt; queryParams = new HashMap&lt;&gt;();
            String[] queryPairs = currentUrl.getQuery().split(&quot;&amp;&quot;);

            for (String queryPair : queryPairs) {
                String[] parts = queryPair.split(&quot;=&quot;);
                queryParams.put(parts[0], parts[1]);
                isMatched = true;
            }

            String multiTradetxId = queryParams.get(&quot;txId&quot;);
            WDS.vars.put(&quot;multi_Trade_txId&quot;, multiTradetxId);
            Thread.sleep(5000);
        } catch (Exception e) {
            WDS.log.error(&quot;Error extracting txId data: &quot; + e.getMessage());
        }
    }
}
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">groovy</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MultilateralTradeEscrowInfoList"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MultilateralTradeEscrowInfoList" enabled="true">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/query-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;getMultilateralTradeEscrowInfoList&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;sender&quot;: &quot;${stg_user_1}&quot;,&#xd;
        &quot;admin&quot;: &quot;${admin}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">d27cfb3b-dc99-438e-ae3f-076173bfe7c5</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MultilateralEscrowRelease"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MultilateralEscrowRelease" enabled="true">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/submit-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;multilateralEscrowRelease&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;receiver&quot;: &quot;${stg_user_2}&quot;,&#xd;
        &quot;amount&quot;: 10,&#xd;
        &quot;escrowTxId&quot;: &quot;${multi_Trade_txId}&quot;&#xd;
    },&#xd;
    &quot;metaData&quot; : {&#xd;
        &quot;correlationId&quot; : &quot;${__UUID()}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">a835b4e9-26d5-48c9-a0f7-f6cee00a0153</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="x-km-correlation-id" elementType="Header">
                  <stringProp name="Header.name">x-km-correlation-id</stringProp>
                  <stringProp name="Header.value">ef1ffb1a-0dfe-4d46-9c7f-0e84649a72a1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Fetch-transaction-status" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="fetch-transaction-status" enabled="true">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/fetch-transaction-status</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;getTxStatus&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;txId&quot;: &quot;a27e5bf57f30f66950c381550e22b646fdf87b8fd6af00ef0ffbca86d2a1385a&quot;,&#xd;
        &quot;referenceId&quot;: null,&#xd;
        &quot;activityType&quot;: &quot;multilateralRelease&quot;,&#xd;
        &quot;correlationId&quot;: &quot;null&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ijc2MzZBMDgyQjgzMEIxQzlEMEQ1OTBDREQ4Q0ZGODUwMjNFQzg5MTYiLCJ4NXQiOiJkamFnZ3Jnd3NjblExWkROMk1fNFVDUHNpUlkiLCJ0eXAiOiJhdCtqd3QifQ.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0Iiwidl9pZCI6IjFiNGUwMTc1LTYyMjEtNDNiZC04ODk5LWFlYmQ3NDdkNmI3NiIsIm5hbWUiOiJzYW5pdXp6YW1hbnJvYmluQHlvcG1haWwuY29tIiwiZF9uIjoiU2FuaXV6emFtYW4gUm9iaW4iLCJsYW5nIjoiZW4tVVMiLCJlbWFpbCI6InNhbml1enphbWFucm9iaW5AeW9wbWFpbC5jb20iLCJzdWIiOiJmOWQyYmM3YS1lMTU3LTQ1NWItOWQzMi1iZWZiYmUwMTE3NWYiLCJwaG9uZV9udW1iZXIiOiIiLCJzX2lkIjoiM2U1MmRmODUtNmI0NS00ZGUwLTllY2ItMjIwMWIyMjNmNzA4Iiwicm9sZSI6WyJhZG1pbiIsImFkbWluX3BhbmVsX3VzZXIiLCJhbm9ueW11cyIsImFzcF9tYW5hZ2VyIiwiYmlsbF9jb25maXJtYXRpb25fbWFuYWdlciIsImNhcnRfbWFuYWdlciIsImNvbnRlX3VwbG9hZGVyIiwiY3VzdG9tZXJfbWFuYWdlciIsImRlbW9fY29udGVudF9tYW5hZ2VyIiwiZWt0YV9lZGl0YWJsZV9yb2xlIiwiaW5hY3RpdmVfdXNlcl9yb2xlIiwiaW52ZW50b3J5X3ZpZXdlciIsIm1yX21hbmFnZXIiLCJub3RpZmljYXRpb25fbWFuYWdlciIsIm9yZGVyX21hbmFnZXIiLCJwcm9kdWN0X2NvbnRlbnRfbWFuYWdlciIsInFhX2FkbWluIiwicWFfbWFuYWdlciIsInFuYV9tYW5hZ2VyIiwicmVwb3J0X21hbmFnZXIiLCJzdXBwbGllcl9tYW5hZ2VyIiwidGVzdF9yb2xlIiwidG9rZW5fbWFuYWdlciIsInRvcHVfdGVzdF9yb2xlIiwidXNlciIsInVzZXJfbWFuYWdlciIsInVzZXJhcHBfaG9tZXBhZ2VfY29udGVudF9tYW5hZ2VyIiwid2FsbGV0YWRtaW4iLCJhbm9ueW1vdXMiXSwib2lfcHJzdCI6IjZlNjVhMTcyLTE5ZDItNDgxMC1iYWYwLWQxZTMxZDg1M2RmMCIsImNsaWVudF9pZCI6IjZlNjVhMTcyLTE5ZDItNDgxMC1iYWYwLWQxZTMxZDg1M2RmMCIsInNjb3BlIjoib2ZmbGluZV9hY2Nlc3MiLCJqdGkiOiJkMTdkYmI2My0xODQxLTQ3MTMtOTFhNy1hMGQ3ZTA1MTcxNTMiLCJleHAiOjE3MDE0Mjc4OTMsImlzcyI6Imh0dHBzOi8vZGV2LWlkZW50aXR5LmtvbmFuY3AuY29tLyIsImlhdCI6MTcwMTQyNzQ3M30.LPvJZGpWxJZmah_AKmH0xyHuLq6Bs5u3k7ROzpOIv_7yVSLgpIuR-4TrBRY7428g0omlyXEtHzSpOz3qNHdTsTTYFiWvC6HWp9cocdBJ0uFPokFuzwjBub1cuC8JRMD-b4JwBXgzcDE7ucR_TNhES9uV5Zz0lfzpNP-Czzvegty8lZCJXDOqmV9alUhZ1b_gVZolJqolwbV1yja56Q2_N2tF3aW5Dvy6zSmfkbqIZi2YhCGGX5wCPaqgWrk2bvyCvumGZF1MnRtNFoq5oGup3VFm3_pYVVRBr2ZrjBmxpvaoLGYi5KQlErSc7N9K50elSsxY2C_qZt2DfL07d9MrMg</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">e527a0bd-bca2-4f03-8ed3-d03ae22bf008</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Redeem Concurrency">
        <intProp name="ThreadGroup.num_threads">3</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="checkBalance"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkBalance">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/query-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;checkBalance&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;owner&quot;: &quot;bb2fed14f087abb628d0bf87f12ef80d6ec79bb45d2d62cf2fa63c7c3c9599f5&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">9d73d513-0de8-479a-bb9e-87cbacf9fc4d</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RedeemEscrowTransfer" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RedeemEscrowTransfer">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/initialize-operation</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;redeemEscrowTransfer&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;redirectURL&quot;: &quot;${redirect_URL}&quot;,&#xd;
        &quot;sender&quot;: &quot;bb2fed14f087abb628d0bf87f12ef80d6ec79bb45d2d62cf2fa63c7c3c9599f5&quot;,&#xd;
        &quot;tokenId&quot;: 368,&#xd;
        &quot;tokenAmount&quot;: 10&#xd;
    },&#xd;
    &quot;metaData&quot; : {&#xd;
        &quot;correlationId&quot; : &quot;${__UUID()}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">507213c1-80b3-4a8b-a4f4-b5b63bb503a5</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def response = prev.getResponseDataAsString()
def jsonResponse = new JsonSlurper().parseText(response)
def escrowURL = jsonResponse.result.url

vars.put(&quot;escrow_URL&quot;, escrowURL)
log.info(&quot;Extracted escrowURL: ${escrowURL}&quot;)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config">
            <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
            <stringProp name="WebDriverConfig.driver_path">C:\Users\kowshik.saha\Desktop\chromedriver_126.exe</stringProp>
            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
            <boolProp name="WebDriverConfig.headless">false</boolProp>
            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
            <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
            <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host"></stringProp>
            <intProp name="WebDriverConfig.http_port">8080</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WebDriver Sampler">
            <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.net.URL;
import java.util.HashMap;

WDS.sampleResult.sampleStart();

try {
    String url = &quot;${escrow_URL}&quot;;
    var wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(10));
    WDS.browser.get(url);
    List&lt;By&gt; inputFields = new ArrayList&lt;&gt;();

    for (int i = 0; i &lt;= 5; i++) {
        inputFields.add(By.id(&quot;pinInput&quot; + i));
    }

    for (int i = 0; i &lt; inputFields.size(); i++) {
        By inputField = inputFields.get(i);
        wait.until(ExpectedConditions.visibilityOfElementLocated(inputField));
        WDS.browser.findElement(inputField).sendKeys(&quot;1&quot;);
    }

    By submitBtnLocator = By.id(&quot;pinButton&quot;);
    wait.until(ExpectedConditions.visibilityOfElementLocated(submitBtnLocator));
    WDS.browser.findElement(submitBtnLocator).click();
} catch (InterruptedException e) {
    WDS.log.error(&quot;Thread interrupted: &quot; + e.getMessage());
} catch (Exception e) {
    WDS.log.error(&quot;Error occurred: &quot; + e.getMessage());
}

String baseUrl = &quot;https://stg-explorer.ksldev.com&quot;;
boolean isMatched = false;
while (!isMatched) {
    if (WDS.browser.getCurrentUrl().startsWith(baseUrl)) {
        try {
            URL url = new URL(WDS.browser.getCurrentUrl());
            Map&lt;String, String&gt; queryParams = new HashMap&lt;&gt;();
            String[] queryPairs = url.getQuery().split(&quot;&amp;&quot;);

            for (String queryPair : queryPairs) {
                String[] parts = queryPair.split(&quot;=&quot;);
                queryParams.put(parts[0], parts[1]);
                isMatched = true;
            }

            String escrowtxId = queryParams.get(&quot;txId&quot;);
            WDS.vars.put(&quot;ecsrow_txId&quot;, escrowtxId);
        } catch (Exception e) {
            WDS.log.error(&quot;Error extracting bca data: &quot; + e.getMessage());
        }
    }
}
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">groovy</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="redeemEscrowRelease" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="redeemEscrowRelease">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/submit-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;redeemEscrowRelease&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;receiver&quot;: null,&#xd;
        &quot;escrowTxId&quot;: &quot;${ecsrow_txId}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">d24edc21-752c-48f4-ab46-2e174a89b4af</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">Thread.sleep(5000)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="checkBalance" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkBalance">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/query-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;checkBalance&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;owner&quot;: &quot;bb2fed14f087abb628d0bf87f12ef80d6ec79bb45d2d62cf2fa63c7c3c9599f5&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">9d73d513-0de8-479a-bb9e-87cbacf9fc4d</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Refund Concurrency" enabled="false">
        <intProp name="ThreadGroup.num_threads">10</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CheckBalance"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkBalance">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/query-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;checkBalance&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;owner&quot;: &quot;bb2fed14f087abb628d0bf87f12ef80d6ec79bb45d2d62cf2fa63c7c3c9599f5&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">9d73d513-0de8-479a-bb9e-87cbacf9fc4d</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RefundEscrowTransfer"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RefundEscrowTransfer">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/initialize-operation</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;refundEscrowTransfer&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;redirectURL&quot;: &quot;${redirect_URL}&quot;,&#xd;
        &quot;sender&quot;: &quot;bb2fed14f087abb628d0bf87f12ef80d6ec79bb45d2d62cf2fa63c7c3c9599f5&quot;,&#xd;
        &quot;beneficiary&quot;: &quot;${admin}&quot;,&#xd;
        &quot;tokenId&quot;: 368,&#xd;
        &quot;tokenAmount&quot;: 10&#xd;
    },&#xd;
    &quot;metaData&quot; : {&#xd;
        &quot;correlationId&quot; : &quot;${__UUID()}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">8d347314-9b55-4a2b-959b-46b06a6c92f7</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def response = prev.getResponseDataAsString()
def jsonResponse = new JsonSlurper().parseText(response)
def refundEscrowURL = jsonResponse.result.url

vars.put(&quot;refundEscrow_URL&quot;, refundEscrowURL)
log.info(&quot;Extracted refundEscrowURL: ${escrowURL}&quot;)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config">
            <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
            <stringProp name="WebDriverConfig.driver_path">C:\Users\kowshik.saha\Desktop\chromedriver_126.exe</stringProp>
            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
            <boolProp name="WebDriverConfig.headless">true</boolProp>
            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
            <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
            <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host"></stringProp>
            <intProp name="WebDriverConfig.http_port">8080</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WebDriver Sampler">
            <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.util.*;

WDS.sampleResult.sampleStart();

try {
    String url = &quot;${refundEscrow_URL}&quot;;
    var wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(5));
    WDS.browser.get(url);

    List&lt;By&gt; inputFields = new ArrayList&lt;&gt;();

    for (int i = 0; i &lt;= 5; i++) {
        inputFields.add(By.id(&quot;pinInput&quot; + i));
    }

    for (int i = 0; i &lt; inputFields.size(); i++) {
        By inputField = inputFields.get(i);
        wait.until(ExpectedConditions.visibilityOfElementLocated(inputField));
        WDS.browser.findElement(inputField).sendKeys(&quot;1&quot;);
        Thread.sleep(100);
    }

    By submitBtnLocator = By.id(&quot;pinButton&quot;);
    wait.until(ExpectedConditions.visibilityOfElementLocated(submitBtnLocator));
    WDS.browser.findElement(submitBtnLocator).click();
} catch (Exception e) {
    WDS.log.error(&quot;Error occurred: &quot; + e.getMessage());
}

String baseUrl = &quot;https://stg-explorer.ksldev.com&quot;;
boolean isMatched = false;

while (!isMatched) {
    if (WDS.browser.getCurrentUrl().startsWith(baseUrl)) {
        try {
            URL currentUrl = new URL(WDS.browser.getCurrentUrl());
            Map&lt;String, String&gt; queryParams = new HashMap&lt;&gt;();
            String[] queryPairs = currentUrl.getQuery().split(&quot;&amp;&quot;);

            for (String queryPair : queryPairs) {
                String[] parts = queryPair.split(&quot;=&quot;);
                queryParams.put(parts[0], parts[1]);
                isMatched = true;
            }

            String refundEscrowtxId = queryParams.get(&quot;txId&quot;);
            WDS.vars.put(&quot;refundEscrow_txId&quot;, refundEscrowtxId);
        } catch (Exception e) {
            WDS.log.error(&quot;Error extracting txId data: &quot; + e.getMessage());
        }
    }
}
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">groovy</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RefundEscrowRelease"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="refundEscrowRelease">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/submit-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;refundEscrowRelease&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;escrowTxId&quot;: &quot;${refundEscrow_txId}&quot;,&#xd;
        &quot;receiver&quot;: &quot;${admin}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">97035eb2-0a0c-45b2-9a3a-19dc35ba6718</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CheckBalance"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkBalance">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/query-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;checkBalance&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;owner&quot;: &quot;bb2fed14f087abb628d0bf87f12ef80d6ec79bb45d2d62cf2fa63c7c3c9599f5&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">9d73d513-0de8-479a-bb9e-87cbacf9fc4d</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Single Trade Concurrency" enabled="false">
        <intProp name="ThreadGroup.num_threads">10</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CheckBalance"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkBalance">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/query-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;checkBalance&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;owner&quot;: &quot;bb2fed14f087abb628d0bf87f12ef80d6ec79bb45d2d62cf2fa63c7c3c9599f5&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">9d73d513-0de8-479a-bb9e-87cbacf9fc4d</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SingleTradeEscrowTransfer"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SingleTradeEscrowTransfer">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/initialize-operation</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;escrowTransfer&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;redirectURL&quot;: &quot;${redirect_URL}&quot;,&#xd;
        &quot;sender&quot;: &quot;$bb2fed14f087abb628d0bf87f12ef80d6ec79bb45d2d62cf2fa63c7c3c9599f5&quot;,&#xd;
        &quot;beneficiary&quot;: &quot;${stg_user_2}&quot;,&#xd;
        &quot;tokenId&quot;: 368,&#xd;
        &quot;tokenAmount&quot;: 10&#xd;
    },&#xd;
    &quot;metaData&quot; : {&#xd;
        &quot;correlationId&quot; : &quot;${__UUID()}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">dca23e09-491d-4a32-a634-1679870dfddc</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def response = prev.getResponseDataAsString()
def jsonResponse = new JsonSlurper().parseText(response)
def singleTradeEscrowURL = jsonResponse.result.url

vars.put(&quot;single_Trade_EscrowURL&quot;, singleTradeEscrowURL)
log.info(&quot;Extracted singleTradeEscrowURL: ${singleTradeEscrowURL}&quot;)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config" enabled="true">
            <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
            <stringProp name="WebDriverConfig.driver_path">C:\Users\kowshik.saha\Desktop\chromedriver_126.exe</stringProp>
            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
            <boolProp name="WebDriverConfig.headless">true</boolProp>
            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
            <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
            <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host"></stringProp>
            <intProp name="WebDriverConfig.http_port">8080</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WebDriver Sampler">
            <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.util.*;

WDS.sampleResult.sampleStart();

try {
    String url = &quot;${single_Trade_EscrowURL}&quot;;
    var wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(5));
    WDS.browser.get(url);

    List&lt;By&gt; inputFields = new ArrayList&lt;&gt;();

    for (int i = 0; i &lt;= 5; i++) {
        inputFields.add(By.id(&quot;pinInput&quot; + i));
    }

    for (int i = 0; i &lt; inputFields.size(); i++) {
        By inputField = inputFields.get(i);
        wait.until(ExpectedConditions.visibilityOfElementLocated(inputField));
        WDS.browser.findElement(inputField).sendKeys(&quot;1&quot;);
        Thread.sleep(100);
    }

    By submitBtnLocator = By.id(&quot;pinButton&quot;);
    wait.until(ExpectedConditions.visibilityOfElementLocated(submitBtnLocator));
    WDS.browser.findElement(submitBtnLocator).click();
} catch (Exception e) {
    WDS.log.error(&quot;Error occurred: &quot; + e.getMessage());
}

String baseUrl = &quot;https://stg-explorer.ksldev.com&quot;;
boolean isMatched = false;

while (!isMatched) {
    if (WDS.browser.getCurrentUrl().startsWith(baseUrl)) {
        try {
            URL currentUrl = new URL(WDS.browser.getCurrentUrl());
            Map&lt;String, String&gt; queryParams = new HashMap&lt;&gt;();
            String[] queryPairs = currentUrl.getQuery().split(&quot;&amp;&quot;);

            for (String queryPair : queryPairs) {
                String[] parts = queryPair.split(&quot;=&quot;);
                queryParams.put(parts[0], parts[1]);
                isMatched = true;
            }

            String singleTradetxId = queryParams.get(&quot;txId&quot;);
            WDS.vars.put(&quot;single_Trade_txId&quot;, singleTradetxId);
        } catch (Exception e) {
            WDS.log.error(&quot;Error extracting txId data: &quot; + e.getMessage());
        }
    }
}
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">groovy</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SingleTradeEscrowInfoList"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SingleTradeEscrowInfoList">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/query-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;getTradeEscrowInfoList&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;sender&quot;: &quot;bb2fed14f087abb628d0bf87f12ef80d6ec79bb45d2d62cf2fa63c7c3c9599f5&quot;,&#xd;
        &quot;admin&quot;: &quot;${admin}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">7d42306a-fda9-469a-a4d6-35259824212c</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SingleTradeEscrowRelease"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SingleTradeReleaseEscrow">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/submit-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;releaseEscrow&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;receiver&quot;: &quot;${stg_user_2}&quot;,&#xd;
        &quot;escrowTxId&quot;: &quot;${single_Trade_txId}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">5abebe87-69c9-45a4-8350-309b1b9267f7</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CheckBalance"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkBalance">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/query-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;checkBalance&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;owner&quot;: &quot;bb2fed14f087abb628d0bf87f12ef80d6ec79bb45d2d62cf2fa63c7c3c9599f5&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">9d73d513-0de8-479a-bb9e-87cbacf9fc4d</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Multi Trade Concurrency" enabled="false">
        <intProp name="ThreadGroup.num_threads">10</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CheckBalance"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkBalance">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/query-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;checkBalance&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;owner&quot;: &quot;bb2fed14f087abb628d0bf87f12ef80d6ec79bb45d2d62cf2fa63c7c3c9599f5&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">9d73d513-0de8-479a-bb9e-87cbacf9fc4d</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MultilateralEscrowTransfer"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MultilateralEscrowTransfer">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/initialize-operation</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;multilateralEscrowTransfer&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;redirectURL&quot;: &quot;${redirect_URL}&quot;,&#xd;
        &quot;sender&quot;: &quot;bb2fed14f087abb628d0bf87f12ef80d6ec79bb45d2d62cf2fa63c7c3c9599f5&quot;,&#xd;
        &quot;beneficiary&quot;: &quot;0x0&quot;,&#xd;
        &quot;tokenId&quot;: 368,&#xd;
        &quot;tokenAmount&quot;: 10&#xd;
    },&#xd;
    &quot;metaData&quot;: {&#xd;
        &quot;correlationId&quot;: &quot;${__UUID()}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">d276b435-44da-4b83-b5b7-6006f41cfc2a</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

def response = prev.getResponseDataAsString()
def jsonResponse = new JsonSlurper().parseText(response)
def multiTradeEscrowURL = jsonResponse.result.url

vars.put(&quot;multi_Trade_EscrowURL&quot;, multiTradeEscrowURL)
log.info(&quot;Extracted correlationId: ${multiTradeEscrowURL}&quot;)

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="Chrome Driver Config" enabled="true">
            <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
            <stringProp name="WebDriverConfig.driver_path">C:\Users\kowshik.saha\Desktop\chromedriver_126.exe</stringProp>
            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
            <boolProp name="WebDriverConfig.headless">true</boolProp>
            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
            <stringProp name="ChromeDriverConfig.additional_args"></stringProp>
            <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host"></stringProp>
            <intProp name="WebDriverConfig.http_port">8080</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;
import java.time.Duration;
import java.util.*;

WDS.sampleResult.sampleStart();

try {
    String url = &quot;${multi_Trade_EscrowURL}&quot;;
    var wait = new WebDriverWait(WDS.browser, Duration.ofSeconds(5));
    WDS.browser.get(url);

    List&lt;By&gt; inputFields = new ArrayList&lt;&gt;();

    for (int i = 0; i &lt;= 5; i++) {
        inputFields.add(By.id(&quot;pinInput&quot; + i));
    }

    for (int i = 0; i &lt; inputFields.size(); i++) {
        By inputField = inputFields.get(i);
        wait.until(ExpectedConditions.visibilityOfElementLocated(inputField));
        WDS.browser.findElement(inputField).sendKeys(&quot;1&quot;);
        Thread.sleep(100);
    }

    By submitBtnLocator = By.id(&quot;pinButton&quot;);
    wait.until(ExpectedConditions.visibilityOfElementLocated(submitBtnLocator));
    WDS.browser.findElement(submitBtnLocator).click();
} catch (Exception e) {
    WDS.log.error(&quot;Error occurred: &quot; + e.getMessage());
}

String baseUrl = &quot;https://stg-explorer.ksldev.com&quot;;
boolean isMatched = false;

while (!isMatched) {
    if (WDS.browser.getCurrentUrl().startsWith(baseUrl)) {
        try {
            URL currentUrl = new URL(WDS.browser.getCurrentUrl());
            Map&lt;String, String&gt; queryParams = new HashMap&lt;&gt;();
            String[] queryPairs = currentUrl.getQuery().split(&quot;&amp;&quot;);

            for (String queryPair : queryPairs) {
                String[] parts = queryPair.split(&quot;=&quot;);
                queryParams.put(parts[0], parts[1]);
                isMatched = true;
            }

            String multiTradetxId = queryParams.get(&quot;txId&quot;);
            WDS.vars.put(&quot;multi_Trade_txId&quot;, multiTradetxId);
            Thread.sleep(5000);
        } catch (Exception e) {
            WDS.log.error(&quot;Error extracting txId data: &quot; + e.getMessage());
        }
    }
}
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">groovy</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MultilateralTradeEscrowInfoList"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MultilateralTradeEscrowInfoList">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/query-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;getMultilateralTradeEscrowInfoList&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;sender&quot;: &quot;bb2fed14f087abb628d0bf87f12ef80d6ec79bb45d2d62cf2fa63c7c3c9599f5&quot;,&#xd;
        &quot;admin&quot;: &quot;${admin}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">d27cfb3b-dc99-438e-ae3f-076173bfe7c5</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MultilateralEscrowRelease"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MultilateralEscrowRelease">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/submit-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;multilateralEscrowRelease&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;callBackURL&quot;: &quot;${callBack_URL}&quot;,&#xd;
        &quot;receiver&quot;: &quot;${stg_user_2}&quot;,&#xd;
        &quot;amount&quot;: 10,&#xd;
        &quot;escrowTxId&quot;: &quot;${multi_Trade_txId}&quot;&#xd;
    },&#xd;
    &quot;metaData&quot; : {&#xd;
        &quot;correlationId&quot; : &quot;${__UUID()}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">a835b4e9-26d5-48c9-a0f7-f6cee00a0153</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="x-km-correlation-id" elementType="Header">
                  <stringProp name="Header.name">x-km-correlation-id</stringProp>
                  <stringProp name="Header.value">ef1ffb1a-0dfe-4d46-9c7f-0e84649a72a1</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CheckBalance"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkBalance">
            <stringProp name="HTTPSampler.domain">stg-dlt.ksldev.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/v1/query-transaction</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;reqType&quot;: &quot;checkBalance&quot;,&#xd;
    &quot;data&quot;: {&#xd;
        &quot;owner&quot;: &quot;bb2fed14f087abb628d0bf87f12ef80d6ec79bb45d2d62cf2fa63c7c3c9599f5&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">9d73d513-0de8-479a-bb9e-87cbacf9fc4d</stringProp>
                </elementProp>
                <elementProp name="x-tm-jwt-token" elementType="Header">
                  <stringProp name="Header.name">x-tm-jwt-token</stringProp>
                  <stringProp name="Header.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0X2lkIjoiMDEwNWQ4MjQtMDE4ZC00ODQ3LWFlOGEtMTU5ZWE1OWUwM2E0IiwibmFtZSI6Ilpha2FyaWEgSG9zc2FpbiIsImxhbmciOiJlbiIsImVtYWlsIjoiemFrYXJpYWhvc3NhaW4yMEB5b3BtYWlsLmNvbSIsInN1YiI6IjAzYmQwZDg0LTU3ZjEtNDI4Yy05ZmIwLTY5NzVhZjY3MTU4ZiIsInBob25lX251bWJlciI6IjAxOTQ5Njk0MTU3Iiwicm9sZSI6IkFETUlOIiwic2NvcGUiOiJvZmZsaW5lX2FjY2VzcyIsImlhdCI6MTcxNzU2NTU5MCwiZXhwIjoxNzQ5MTIzMTkwfQ.V9Zrc7-mVS2YQnSpbV52Xl8nGX5AOA2O5eeWV28TQ8l81Rx6tqCJBoE2MjsLAZzTFh8X4itsns5aQ9HFYypAWOp-C6-uxKtCJ9lA3m1UxAslA3gC-bLIk5KXuHguMyPUqpPe6j5noeoP32VKlPb2Rtdj6pedw3A1UJy5mfejGMJJhrpQ3ZOgD3OaMlpV6Uo14XBhynXNKkpVVvblLsAaHL30UZVQJKmWZjqOkQdmPoukRf5DSPSFY74Fk6eR89r9QC67LcikL7C_XO1hG5lzXmRjiopgONIj6tpOpMR_uVQXfV-4DAYjBuuvtDPDyTO-yQi8fTjUcWJ7DOKqACMvUg</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.40.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
